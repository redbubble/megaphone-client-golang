// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kinesis/kinesisiface (interfaces: KinesisAPI)

package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	kinesis "github.com/aws/aws-sdk-go/service/kinesis"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockKinesisAPI struct {
	fail func(message string, callerSkip ...int)
}

func NewMockKinesisAPI() *MockKinesisAPI {
	return &MockKinesisAPI{fail: pegomock.GlobalFailHandler}
}

func (mock *MockKinesisAPI) AddTagsToStream(_param0 *kinesis.AddTagsToStreamInput) (*kinesis.AddTagsToStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AddTagsToStream", params, []reflect.Type{reflect.TypeOf((**kinesis.AddTagsToStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.AddTagsToStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.AddTagsToStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) AddTagsToStreamRequest(_param0 *kinesis.AddTagsToStreamInput) (*request.Request, *kinesis.AddTagsToStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AddTagsToStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.AddTagsToStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.AddTagsToStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.AddTagsToStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) AddTagsToStreamWithContext(_param0 aws.Context, _param1 *kinesis.AddTagsToStreamInput, _param2 ...request.Option) (*kinesis.AddTagsToStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AddTagsToStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.AddTagsToStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.AddTagsToStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.AddTagsToStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) CreateStream(_param0 *kinesis.CreateStreamInput) (*kinesis.CreateStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateStream", params, []reflect.Type{reflect.TypeOf((**kinesis.CreateStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.CreateStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.CreateStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) CreateStreamRequest(_param0 *kinesis.CreateStreamInput) (*request.Request, *kinesis.CreateStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.CreateStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.CreateStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.CreateStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) CreateStreamWithContext(_param0 aws.Context, _param1 *kinesis.CreateStreamInput, _param2 ...request.Option) (*kinesis.CreateStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.CreateStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.CreateStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.CreateStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DecreaseStreamRetentionPeriod(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DecreaseStreamRetentionPeriod", params, []reflect.Type{reflect.TypeOf((**kinesis.DecreaseStreamRetentionPeriodOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DecreaseStreamRetentionPeriodOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DecreaseStreamRetentionPeriodOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DecreaseStreamRetentionPeriodRequest(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) (*request.Request, *kinesis.DecreaseStreamRetentionPeriodOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DecreaseStreamRetentionPeriodRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.DecreaseStreamRetentionPeriodOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.DecreaseStreamRetentionPeriodOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.DecreaseStreamRetentionPeriodOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DecreaseStreamRetentionPeriodWithContext(_param0 aws.Context, _param1 *kinesis.DecreaseStreamRetentionPeriodInput, _param2 ...request.Option) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DecreaseStreamRetentionPeriodWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.DecreaseStreamRetentionPeriodOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DecreaseStreamRetentionPeriodOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DecreaseStreamRetentionPeriodOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DeleteStream(_param0 *kinesis.DeleteStreamInput) (*kinesis.DeleteStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteStream", params, []reflect.Type{reflect.TypeOf((**kinesis.DeleteStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DeleteStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DeleteStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DeleteStreamRequest(_param0 *kinesis.DeleteStreamInput) (*request.Request, *kinesis.DeleteStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.DeleteStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.DeleteStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.DeleteStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DeleteStreamWithContext(_param0 aws.Context, _param1 *kinesis.DeleteStreamInput, _param2 ...request.Option) (*kinesis.DeleteStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.DeleteStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DeleteStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DeleteStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeLimits(_param0 *kinesis.DescribeLimitsInput) (*kinesis.DescribeLimitsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeLimits", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeLimitsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeLimitsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeLimitsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeLimitsRequest(_param0 *kinesis.DescribeLimitsInput) (*request.Request, *kinesis.DescribeLimitsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeLimitsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.DescribeLimitsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.DescribeLimitsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.DescribeLimitsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeLimitsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeLimitsInput, _param2 ...request.Option) (*kinesis.DescribeLimitsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeLimitsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeLimitsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeLimitsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeLimitsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStream(_param0 *kinesis.DescribeStreamInput) (*kinesis.DescribeStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStream", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStreamPages(_param0 *kinesis.DescribeStreamInput, _param1 func(*kinesis.DescribeStreamOutput, bool) bool) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamPages", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) DescribeStreamPagesWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 func(*kinesis.DescribeStreamOutput, bool) bool, _param3 ...request.Option) error {
	params := []pegomock.Param{_param0, _param1, _param2}
	for _, param := range _param3 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamPagesWithContext", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) DescribeStreamRequest(_param0 *kinesis.DescribeStreamInput) (*request.Request, *kinesis.DescribeStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.DescribeStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.DescribeStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.DescribeStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStreamSummary(_param0 *kinesis.DescribeStreamSummaryInput) (*kinesis.DescribeStreamSummaryOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamSummary", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeStreamSummaryOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeStreamSummaryOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeStreamSummaryOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStreamSummaryRequest(_param0 *kinesis.DescribeStreamSummaryInput) (*request.Request, *kinesis.DescribeStreamSummaryOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamSummaryRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.DescribeStreamSummaryOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.DescribeStreamSummaryOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.DescribeStreamSummaryOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStreamSummaryWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamSummaryInput, _param2 ...request.Option) (*kinesis.DescribeStreamSummaryOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamSummaryWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeStreamSummaryOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeStreamSummaryOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeStreamSummaryOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DescribeStreamWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.Option) (*kinesis.DescribeStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DescribeStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.DescribeStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.DescribeStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.DescribeStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DisableEnhancedMonitoring(_param0 *kinesis.DisableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DisableEnhancedMonitoring", params, []reflect.Type{reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.EnhancedMonitoringOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.EnhancedMonitoringOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DisableEnhancedMonitoringRequest(_param0 *kinesis.DisableEnhancedMonitoringInput) (*request.Request, *kinesis.EnhancedMonitoringOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DisableEnhancedMonitoringRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.EnhancedMonitoringOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.EnhancedMonitoringOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) DisableEnhancedMonitoringWithContext(_param0 aws.Context, _param1 *kinesis.DisableEnhancedMonitoringInput, _param2 ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DisableEnhancedMonitoringWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.EnhancedMonitoringOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.EnhancedMonitoringOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) EnableEnhancedMonitoring(_param0 *kinesis.EnableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("EnableEnhancedMonitoring", params, []reflect.Type{reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.EnhancedMonitoringOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.EnhancedMonitoringOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) EnableEnhancedMonitoringRequest(_param0 *kinesis.EnableEnhancedMonitoringInput) (*request.Request, *kinesis.EnhancedMonitoringOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("EnableEnhancedMonitoringRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.EnhancedMonitoringOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.EnhancedMonitoringOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) EnableEnhancedMonitoringWithContext(_param0 aws.Context, _param1 *kinesis.EnableEnhancedMonitoringInput, _param2 ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("EnableEnhancedMonitoringWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.EnhancedMonitoringOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.EnhancedMonitoringOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.EnhancedMonitoringOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetRecords(_param0 *kinesis.GetRecordsInput) (*kinesis.GetRecordsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRecords", params, []reflect.Type{reflect.TypeOf((**kinesis.GetRecordsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.GetRecordsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.GetRecordsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetRecordsRequest(_param0 *kinesis.GetRecordsInput) (*request.Request, *kinesis.GetRecordsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRecordsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.GetRecordsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.GetRecordsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.GetRecordsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetRecordsWithContext(_param0 aws.Context, _param1 *kinesis.GetRecordsInput, _param2 ...request.Option) (*kinesis.GetRecordsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRecordsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.GetRecordsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.GetRecordsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.GetRecordsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetShardIterator(_param0 *kinesis.GetShardIteratorInput) (*kinesis.GetShardIteratorOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetShardIterator", params, []reflect.Type{reflect.TypeOf((**kinesis.GetShardIteratorOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.GetShardIteratorOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.GetShardIteratorOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetShardIteratorRequest(_param0 *kinesis.GetShardIteratorInput) (*request.Request, *kinesis.GetShardIteratorOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetShardIteratorRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.GetShardIteratorOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.GetShardIteratorOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.GetShardIteratorOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) GetShardIteratorWithContext(_param0 aws.Context, _param1 *kinesis.GetShardIteratorInput, _param2 ...request.Option) (*kinesis.GetShardIteratorOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetShardIteratorWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.GetShardIteratorOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.GetShardIteratorOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.GetShardIteratorOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) IncreaseStreamRetentionPeriod(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("IncreaseStreamRetentionPeriod", params, []reflect.Type{reflect.TypeOf((**kinesis.IncreaseStreamRetentionPeriodOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.IncreaseStreamRetentionPeriodOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.IncreaseStreamRetentionPeriodOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) IncreaseStreamRetentionPeriodRequest(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) (*request.Request, *kinesis.IncreaseStreamRetentionPeriodOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("IncreaseStreamRetentionPeriodRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.IncreaseStreamRetentionPeriodOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.IncreaseStreamRetentionPeriodOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.IncreaseStreamRetentionPeriodOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) IncreaseStreamRetentionPeriodWithContext(_param0 aws.Context, _param1 *kinesis.IncreaseStreamRetentionPeriodInput, _param2 ...request.Option) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("IncreaseStreamRetentionPeriodWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.IncreaseStreamRetentionPeriodOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.IncreaseStreamRetentionPeriodOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.IncreaseStreamRetentionPeriodOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListShards(_param0 *kinesis.ListShardsInput) (*kinesis.ListShardsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListShards", params, []reflect.Type{reflect.TypeOf((**kinesis.ListShardsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListShardsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListShardsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListShardsRequest(_param0 *kinesis.ListShardsInput) (*request.Request, *kinesis.ListShardsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListShardsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.ListShardsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.ListShardsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.ListShardsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListShardsWithContext(_param0 aws.Context, _param1 *kinesis.ListShardsInput, _param2 ...request.Option) (*kinesis.ListShardsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListShardsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.ListShardsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListShardsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListShardsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListStreams(_param0 *kinesis.ListStreamsInput) (*kinesis.ListStreamsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStreams", params, []reflect.Type{reflect.TypeOf((**kinesis.ListStreamsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListStreamsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListStreamsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListStreamsPages(_param0 *kinesis.ListStreamsInput, _param1 func(*kinesis.ListStreamsOutput, bool) bool) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStreamsPages", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) ListStreamsPagesWithContext(_param0 aws.Context, _param1 *kinesis.ListStreamsInput, _param2 func(*kinesis.ListStreamsOutput, bool) bool, _param3 ...request.Option) error {
	params := []pegomock.Param{_param0, _param1, _param2}
	for _, param := range _param3 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStreamsPagesWithContext", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) ListStreamsRequest(_param0 *kinesis.ListStreamsInput) (*request.Request, *kinesis.ListStreamsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStreamsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.ListStreamsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.ListStreamsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.ListStreamsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListStreamsWithContext(_param0 aws.Context, _param1 *kinesis.ListStreamsInput, _param2 ...request.Option) (*kinesis.ListStreamsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStreamsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.ListStreamsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListStreamsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListStreamsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListTagsForStream(_param0 *kinesis.ListTagsForStreamInput) (*kinesis.ListTagsForStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListTagsForStream", params, []reflect.Type{reflect.TypeOf((**kinesis.ListTagsForStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListTagsForStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListTagsForStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListTagsForStreamRequest(_param0 *kinesis.ListTagsForStreamInput) (*request.Request, *kinesis.ListTagsForStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListTagsForStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.ListTagsForStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.ListTagsForStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.ListTagsForStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) ListTagsForStreamWithContext(_param0 aws.Context, _param1 *kinesis.ListTagsForStreamInput, _param2 ...request.Option) (*kinesis.ListTagsForStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListTagsForStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.ListTagsForStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.ListTagsForStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.ListTagsForStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) MergeShards(_param0 *kinesis.MergeShardsInput) (*kinesis.MergeShardsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("MergeShards", params, []reflect.Type{reflect.TypeOf((**kinesis.MergeShardsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.MergeShardsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.MergeShardsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) MergeShardsRequest(_param0 *kinesis.MergeShardsInput) (*request.Request, *kinesis.MergeShardsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("MergeShardsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.MergeShardsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.MergeShardsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.MergeShardsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) MergeShardsWithContext(_param0 aws.Context, _param1 *kinesis.MergeShardsInput, _param2 ...request.Option) (*kinesis.MergeShardsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("MergeShardsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.MergeShardsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.MergeShardsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.MergeShardsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecord(_param0 *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecord", params, []reflect.Type{reflect.TypeOf((**kinesis.PutRecordOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.PutRecordOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.PutRecordOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecordRequest(_param0 *kinesis.PutRecordInput) (*request.Request, *kinesis.PutRecordOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecordRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.PutRecordOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.PutRecordOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.PutRecordOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecordWithContext(_param0 aws.Context, _param1 *kinesis.PutRecordInput, _param2 ...request.Option) (*kinesis.PutRecordOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecordWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.PutRecordOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.PutRecordOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.PutRecordOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecords(_param0 *kinesis.PutRecordsInput) (*kinesis.PutRecordsOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecords", params, []reflect.Type{reflect.TypeOf((**kinesis.PutRecordsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.PutRecordsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.PutRecordsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecordsRequest(_param0 *kinesis.PutRecordsInput) (*request.Request, *kinesis.PutRecordsOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecordsRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.PutRecordsOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.PutRecordsOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.PutRecordsOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) PutRecordsWithContext(_param0 aws.Context, _param1 *kinesis.PutRecordsInput, _param2 ...request.Option) (*kinesis.PutRecordsOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PutRecordsWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.PutRecordsOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.PutRecordsOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.PutRecordsOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) RemoveTagsFromStream(_param0 *kinesis.RemoveTagsFromStreamInput) (*kinesis.RemoveTagsFromStreamOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RemoveTagsFromStream", params, []reflect.Type{reflect.TypeOf((**kinesis.RemoveTagsFromStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.RemoveTagsFromStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.RemoveTagsFromStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) RemoveTagsFromStreamRequest(_param0 *kinesis.RemoveTagsFromStreamInput) (*request.Request, *kinesis.RemoveTagsFromStreamOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RemoveTagsFromStreamRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.RemoveTagsFromStreamOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.RemoveTagsFromStreamOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.RemoveTagsFromStreamOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) RemoveTagsFromStreamWithContext(_param0 aws.Context, _param1 *kinesis.RemoveTagsFromStreamInput, _param2 ...request.Option) (*kinesis.RemoveTagsFromStreamOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RemoveTagsFromStreamWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.RemoveTagsFromStreamOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.RemoveTagsFromStreamOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.RemoveTagsFromStreamOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) SplitShard(_param0 *kinesis.SplitShardInput) (*kinesis.SplitShardOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SplitShard", params, []reflect.Type{reflect.TypeOf((**kinesis.SplitShardOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.SplitShardOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.SplitShardOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) SplitShardRequest(_param0 *kinesis.SplitShardInput) (*request.Request, *kinesis.SplitShardOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SplitShardRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.SplitShardOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.SplitShardOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.SplitShardOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) SplitShardWithContext(_param0 aws.Context, _param1 *kinesis.SplitShardInput, _param2 ...request.Option) (*kinesis.SplitShardOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SplitShardWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.SplitShardOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.SplitShardOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.SplitShardOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StartStreamEncryption(_param0 *kinesis.StartStreamEncryptionInput) (*kinesis.StartStreamEncryptionOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StartStreamEncryption", params, []reflect.Type{reflect.TypeOf((**kinesis.StartStreamEncryptionOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.StartStreamEncryptionOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.StartStreamEncryptionOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StartStreamEncryptionRequest(_param0 *kinesis.StartStreamEncryptionInput) (*request.Request, *kinesis.StartStreamEncryptionOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StartStreamEncryptionRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.StartStreamEncryptionOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.StartStreamEncryptionOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.StartStreamEncryptionOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StartStreamEncryptionWithContext(_param0 aws.Context, _param1 *kinesis.StartStreamEncryptionInput, _param2 ...request.Option) (*kinesis.StartStreamEncryptionOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StartStreamEncryptionWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.StartStreamEncryptionOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.StartStreamEncryptionOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.StartStreamEncryptionOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StopStreamEncryption(_param0 *kinesis.StopStreamEncryptionInput) (*kinesis.StopStreamEncryptionOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StopStreamEncryption", params, []reflect.Type{reflect.TypeOf((**kinesis.StopStreamEncryptionOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.StopStreamEncryptionOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.StopStreamEncryptionOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StopStreamEncryptionRequest(_param0 *kinesis.StopStreamEncryptionInput) (*request.Request, *kinesis.StopStreamEncryptionOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StopStreamEncryptionRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.StopStreamEncryptionOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.StopStreamEncryptionOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.StopStreamEncryptionOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) StopStreamEncryptionWithContext(_param0 aws.Context, _param1 *kinesis.StopStreamEncryptionInput, _param2 ...request.Option) (*kinesis.StopStreamEncryptionOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("StopStreamEncryptionWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.StopStreamEncryptionOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.StopStreamEncryptionOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.StopStreamEncryptionOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) UpdateShardCount(_param0 *kinesis.UpdateShardCountInput) (*kinesis.UpdateShardCountOutput, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateShardCount", params, []reflect.Type{reflect.TypeOf((**kinesis.UpdateShardCountOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.UpdateShardCountOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.UpdateShardCountOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) UpdateShardCountRequest(_param0 *kinesis.UpdateShardCountInput) (*request.Request, *kinesis.UpdateShardCountOutput) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateShardCountRequest", params, []reflect.Type{reflect.TypeOf((**request.Request)(nil)).Elem(), reflect.TypeOf((**kinesis.UpdateShardCountOutput)(nil)).Elem()})
	var ret0 *request.Request
	var ret1 *kinesis.UpdateShardCountOutput
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*request.Request)
		}
		if result[1] != nil {
			ret1 = result[1].(*kinesis.UpdateShardCountOutput)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) UpdateShardCountWithContext(_param0 aws.Context, _param1 *kinesis.UpdateShardCountInput, _param2 ...request.Option) (*kinesis.UpdateShardCountOutput, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateShardCountWithContext", params, []reflect.Type{reflect.TypeOf((**kinesis.UpdateShardCountOutput)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *kinesis.UpdateShardCountOutput
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*kinesis.UpdateShardCountOutput)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockKinesisAPI) WaitUntilStreamExists(_param0 *kinesis.DescribeStreamInput) error {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WaitUntilStreamExists", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) WaitUntilStreamExistsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.WaiterOption) error {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WaitUntilStreamExistsWithContext", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) WaitUntilStreamNotExists(_param0 *kinesis.DescribeStreamInput) error {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WaitUntilStreamNotExists", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) WaitUntilStreamNotExistsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.WaiterOption) error {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WaitUntilStreamNotExistsWithContext", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockKinesisAPI) VerifyWasCalledOnce() *VerifierKinesisAPI {
	return &VerifierKinesisAPI{mock, pegomock.Times(1), nil}
}

func (mock *MockKinesisAPI) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierKinesisAPI {
	return &VerifierKinesisAPI{mock, invocationCountMatcher, nil}
}

func (mock *MockKinesisAPI) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierKinesisAPI {
	return &VerifierKinesisAPI{mock, invocationCountMatcher, inOrderContext}
}

type VerifierKinesisAPI struct {
	mock                   *MockKinesisAPI
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierKinesisAPI) AddTagsToStream(_param0 *kinesis.AddTagsToStreamInput) *KinesisAPI_AddTagsToStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddTagsToStream", params)
	return &KinesisAPI_AddTagsToStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_AddTagsToStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_AddTagsToStream_OngoingVerification) GetCapturedArguments() *kinesis.AddTagsToStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_AddTagsToStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.AddTagsToStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.AddTagsToStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.AddTagsToStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) AddTagsToStreamRequest(_param0 *kinesis.AddTagsToStreamInput) *KinesisAPI_AddTagsToStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddTagsToStreamRequest", params)
	return &KinesisAPI_AddTagsToStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_AddTagsToStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_AddTagsToStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.AddTagsToStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_AddTagsToStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.AddTagsToStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.AddTagsToStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.AddTagsToStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) AddTagsToStreamWithContext(_param0 aws.Context, _param1 *kinesis.AddTagsToStreamInput, _param2 ...request.Option) *KinesisAPI_AddTagsToStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddTagsToStreamWithContext", params)
	return &KinesisAPI_AddTagsToStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_AddTagsToStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_AddTagsToStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.AddTagsToStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_AddTagsToStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.AddTagsToStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.AddTagsToStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.AddTagsToStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) CreateStream(_param0 *kinesis.CreateStreamInput) *KinesisAPI_CreateStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateStream", params)
	return &KinesisAPI_CreateStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_CreateStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_CreateStream_OngoingVerification) GetCapturedArguments() *kinesis.CreateStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_CreateStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.CreateStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.CreateStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.CreateStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) CreateStreamRequest(_param0 *kinesis.CreateStreamInput) *KinesisAPI_CreateStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateStreamRequest", params)
	return &KinesisAPI_CreateStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_CreateStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_CreateStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.CreateStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_CreateStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.CreateStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.CreateStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.CreateStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) CreateStreamWithContext(_param0 aws.Context, _param1 *kinesis.CreateStreamInput, _param2 ...request.Option) *KinesisAPI_CreateStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateStreamWithContext", params)
	return &KinesisAPI_CreateStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_CreateStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_CreateStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.CreateStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_CreateStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.CreateStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.CreateStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.CreateStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DecreaseStreamRetentionPeriod(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) *KinesisAPI_DecreaseStreamRetentionPeriod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecreaseStreamRetentionPeriod", params)
	return &KinesisAPI_DecreaseStreamRetentionPeriod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DecreaseStreamRetentionPeriod_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriod_OngoingVerification) GetCapturedArguments() *kinesis.DecreaseStreamRetentionPeriodInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriod_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DecreaseStreamRetentionPeriodInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DecreaseStreamRetentionPeriodInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DecreaseStreamRetentionPeriodInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DecreaseStreamRetentionPeriodRequest(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) *KinesisAPI_DecreaseStreamRetentionPeriodRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecreaseStreamRetentionPeriodRequest", params)
	return &KinesisAPI_DecreaseStreamRetentionPeriodRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DecreaseStreamRetentionPeriodRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriodRequest_OngoingVerification) GetCapturedArguments() *kinesis.DecreaseStreamRetentionPeriodInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriodRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DecreaseStreamRetentionPeriodInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DecreaseStreamRetentionPeriodInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DecreaseStreamRetentionPeriodInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DecreaseStreamRetentionPeriodWithContext(_param0 aws.Context, _param1 *kinesis.DecreaseStreamRetentionPeriodInput, _param2 ...request.Option) *KinesisAPI_DecreaseStreamRetentionPeriodWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecreaseStreamRetentionPeriodWithContext", params)
	return &KinesisAPI_DecreaseStreamRetentionPeriodWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DecreaseStreamRetentionPeriodWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriodWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DecreaseStreamRetentionPeriodInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DecreaseStreamRetentionPeriodWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DecreaseStreamRetentionPeriodInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DecreaseStreamRetentionPeriodInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DecreaseStreamRetentionPeriodInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DeleteStream(_param0 *kinesis.DeleteStreamInput) *KinesisAPI_DeleteStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteStream", params)
	return &KinesisAPI_DeleteStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DeleteStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DeleteStream_OngoingVerification) GetCapturedArguments() *kinesis.DeleteStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DeleteStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DeleteStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DeleteStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DeleteStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DeleteStreamRequest(_param0 *kinesis.DeleteStreamInput) *KinesisAPI_DeleteStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteStreamRequest", params)
	return &KinesisAPI_DeleteStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DeleteStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DeleteStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.DeleteStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DeleteStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DeleteStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DeleteStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DeleteStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DeleteStreamWithContext(_param0 aws.Context, _param1 *kinesis.DeleteStreamInput, _param2 ...request.Option) *KinesisAPI_DeleteStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteStreamWithContext", params)
	return &KinesisAPI_DeleteStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DeleteStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DeleteStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DeleteStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DeleteStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DeleteStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DeleteStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DeleteStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeLimits(_param0 *kinesis.DescribeLimitsInput) *KinesisAPI_DescribeLimits_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeLimits", params)
	return &KinesisAPI_DescribeLimits_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeLimits_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeLimits_OngoingVerification) GetCapturedArguments() *kinesis.DescribeLimitsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeLimits_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeLimitsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeLimitsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeLimitsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeLimitsRequest(_param0 *kinesis.DescribeLimitsInput) *KinesisAPI_DescribeLimitsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeLimitsRequest", params)
	return &KinesisAPI_DescribeLimitsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeLimitsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeLimitsRequest_OngoingVerification) GetCapturedArguments() *kinesis.DescribeLimitsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeLimitsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeLimitsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeLimitsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeLimitsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeLimitsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeLimitsInput, _param2 ...request.Option) *KinesisAPI_DescribeLimitsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeLimitsWithContext", params)
	return &KinesisAPI_DescribeLimitsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeLimitsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeLimitsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeLimitsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DescribeLimitsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeLimitsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeLimitsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeLimitsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStream(_param0 *kinesis.DescribeStreamInput) *KinesisAPI_DescribeStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStream", params)
	return &KinesisAPI_DescribeStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStream_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamPages(_param0 *kinesis.DescribeStreamInput, _param1 func(*kinesis.DescribeStreamOutput, bool) bool) *KinesisAPI_DescribeStreamPages_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamPages", params)
	return &KinesisAPI_DescribeStreamPages_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamPages_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamPages_OngoingVerification) GetCapturedArguments() (*kinesis.DescribeStreamInput, func(*kinesis.DescribeStreamOutput, bool) bool) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *KinesisAPI_DescribeStreamPages_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamInput, _param1 []func(*kinesis.DescribeStreamOutput, bool) bool) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamInput)
		}
		_param1 = make([]func(*kinesis.DescribeStreamOutput, bool) bool, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(func(*kinesis.DescribeStreamOutput, bool) bool)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamPagesWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 func(*kinesis.DescribeStreamOutput, bool) bool, _param3 ...request.Option) *KinesisAPI_DescribeStreamPagesWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	for _, param := range _param3 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamPagesWithContext", params)
	return &KinesisAPI_DescribeStreamPagesWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamPagesWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamPagesWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeStreamInput, func(*kinesis.DescribeStreamOutput, bool) bool, []request.Option) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *KinesisAPI_DescribeStreamPagesWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeStreamInput, _param2 []func(*kinesis.DescribeStreamOutput, bool) bool, _param3 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeStreamInput)
		}
		_param2 = make([]func(*kinesis.DescribeStreamOutput, bool) bool, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(func(*kinesis.DescribeStreamOutput, bool) bool)
		}
		_param3 = make([][]request.Option, len(params[3]))
		for u := range params[0] {
			_param3[u] = make([]request.Option, len(params)-3)
			for x := 3; x < len(params); x++ {
				if params[x][u] != nil {
					_param3[u][x-3] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamRequest(_param0 *kinesis.DescribeStreamInput) *KinesisAPI_DescribeStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamRequest", params)
	return &KinesisAPI_DescribeStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamSummary(_param0 *kinesis.DescribeStreamSummaryInput) *KinesisAPI_DescribeStreamSummary_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamSummary", params)
	return &KinesisAPI_DescribeStreamSummary_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamSummary_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamSummary_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamSummaryInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeStreamSummary_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamSummaryInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamSummaryInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamSummaryInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamSummaryRequest(_param0 *kinesis.DescribeStreamSummaryInput) *KinesisAPI_DescribeStreamSummaryRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamSummaryRequest", params)
	return &KinesisAPI_DescribeStreamSummaryRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamSummaryRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamSummaryRequest_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamSummaryInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DescribeStreamSummaryRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamSummaryInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamSummaryInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamSummaryInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamSummaryWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamSummaryInput, _param2 ...request.Option) *KinesisAPI_DescribeStreamSummaryWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamSummaryWithContext", params)
	return &KinesisAPI_DescribeStreamSummaryWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamSummaryWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamSummaryWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeStreamSummaryInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DescribeStreamSummaryWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeStreamSummaryInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeStreamSummaryInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeStreamSummaryInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DescribeStreamWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.Option) *KinesisAPI_DescribeStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DescribeStreamWithContext", params)
	return &KinesisAPI_DescribeStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DescribeStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DescribeStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DescribeStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DisableEnhancedMonitoring(_param0 *kinesis.DisableEnhancedMonitoringInput) *KinesisAPI_DisableEnhancedMonitoring_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DisableEnhancedMonitoring", params)
	return &KinesisAPI_DisableEnhancedMonitoring_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DisableEnhancedMonitoring_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DisableEnhancedMonitoring_OngoingVerification) GetCapturedArguments() *kinesis.DisableEnhancedMonitoringInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DisableEnhancedMonitoring_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DisableEnhancedMonitoringInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DisableEnhancedMonitoringInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DisableEnhancedMonitoringInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DisableEnhancedMonitoringRequest(_param0 *kinesis.DisableEnhancedMonitoringInput) *KinesisAPI_DisableEnhancedMonitoringRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DisableEnhancedMonitoringRequest", params)
	return &KinesisAPI_DisableEnhancedMonitoringRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DisableEnhancedMonitoringRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DisableEnhancedMonitoringRequest_OngoingVerification) GetCapturedArguments() *kinesis.DisableEnhancedMonitoringInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_DisableEnhancedMonitoringRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DisableEnhancedMonitoringInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DisableEnhancedMonitoringInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DisableEnhancedMonitoringInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) DisableEnhancedMonitoringWithContext(_param0 aws.Context, _param1 *kinesis.DisableEnhancedMonitoringInput, _param2 ...request.Option) *KinesisAPI_DisableEnhancedMonitoringWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DisableEnhancedMonitoringWithContext", params)
	return &KinesisAPI_DisableEnhancedMonitoringWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_DisableEnhancedMonitoringWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_DisableEnhancedMonitoringWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DisableEnhancedMonitoringInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_DisableEnhancedMonitoringWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DisableEnhancedMonitoringInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DisableEnhancedMonitoringInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DisableEnhancedMonitoringInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) EnableEnhancedMonitoring(_param0 *kinesis.EnableEnhancedMonitoringInput) *KinesisAPI_EnableEnhancedMonitoring_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "EnableEnhancedMonitoring", params)
	return &KinesisAPI_EnableEnhancedMonitoring_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_EnableEnhancedMonitoring_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_EnableEnhancedMonitoring_OngoingVerification) GetCapturedArguments() *kinesis.EnableEnhancedMonitoringInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_EnableEnhancedMonitoring_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.EnableEnhancedMonitoringInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.EnableEnhancedMonitoringInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.EnableEnhancedMonitoringInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) EnableEnhancedMonitoringRequest(_param0 *kinesis.EnableEnhancedMonitoringInput) *KinesisAPI_EnableEnhancedMonitoringRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "EnableEnhancedMonitoringRequest", params)
	return &KinesisAPI_EnableEnhancedMonitoringRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_EnableEnhancedMonitoringRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_EnableEnhancedMonitoringRequest_OngoingVerification) GetCapturedArguments() *kinesis.EnableEnhancedMonitoringInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_EnableEnhancedMonitoringRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.EnableEnhancedMonitoringInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.EnableEnhancedMonitoringInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.EnableEnhancedMonitoringInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) EnableEnhancedMonitoringWithContext(_param0 aws.Context, _param1 *kinesis.EnableEnhancedMonitoringInput, _param2 ...request.Option) *KinesisAPI_EnableEnhancedMonitoringWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "EnableEnhancedMonitoringWithContext", params)
	return &KinesisAPI_EnableEnhancedMonitoringWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_EnableEnhancedMonitoringWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_EnableEnhancedMonitoringWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.EnableEnhancedMonitoringInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_EnableEnhancedMonitoringWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.EnableEnhancedMonitoringInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.EnableEnhancedMonitoringInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.EnableEnhancedMonitoringInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetRecords(_param0 *kinesis.GetRecordsInput) *KinesisAPI_GetRecords_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRecords", params)
	return &KinesisAPI_GetRecords_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetRecords_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetRecords_OngoingVerification) GetCapturedArguments() *kinesis.GetRecordsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_GetRecords_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.GetRecordsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.GetRecordsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.GetRecordsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetRecordsRequest(_param0 *kinesis.GetRecordsInput) *KinesisAPI_GetRecordsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRecordsRequest", params)
	return &KinesisAPI_GetRecordsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetRecordsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetRecordsRequest_OngoingVerification) GetCapturedArguments() *kinesis.GetRecordsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_GetRecordsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.GetRecordsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.GetRecordsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.GetRecordsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetRecordsWithContext(_param0 aws.Context, _param1 *kinesis.GetRecordsInput, _param2 ...request.Option) *KinesisAPI_GetRecordsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRecordsWithContext", params)
	return &KinesisAPI_GetRecordsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetRecordsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetRecordsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.GetRecordsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_GetRecordsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.GetRecordsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.GetRecordsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.GetRecordsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetShardIterator(_param0 *kinesis.GetShardIteratorInput) *KinesisAPI_GetShardIterator_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetShardIterator", params)
	return &KinesisAPI_GetShardIterator_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetShardIterator_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetShardIterator_OngoingVerification) GetCapturedArguments() *kinesis.GetShardIteratorInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_GetShardIterator_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.GetShardIteratorInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.GetShardIteratorInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.GetShardIteratorInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetShardIteratorRequest(_param0 *kinesis.GetShardIteratorInput) *KinesisAPI_GetShardIteratorRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetShardIteratorRequest", params)
	return &KinesisAPI_GetShardIteratorRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetShardIteratorRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetShardIteratorRequest_OngoingVerification) GetCapturedArguments() *kinesis.GetShardIteratorInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_GetShardIteratorRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.GetShardIteratorInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.GetShardIteratorInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.GetShardIteratorInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) GetShardIteratorWithContext(_param0 aws.Context, _param1 *kinesis.GetShardIteratorInput, _param2 ...request.Option) *KinesisAPI_GetShardIteratorWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetShardIteratorWithContext", params)
	return &KinesisAPI_GetShardIteratorWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_GetShardIteratorWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_GetShardIteratorWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.GetShardIteratorInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_GetShardIteratorWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.GetShardIteratorInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.GetShardIteratorInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.GetShardIteratorInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) IncreaseStreamRetentionPeriod(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) *KinesisAPI_IncreaseStreamRetentionPeriod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IncreaseStreamRetentionPeriod", params)
	return &KinesisAPI_IncreaseStreamRetentionPeriod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_IncreaseStreamRetentionPeriod_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriod_OngoingVerification) GetCapturedArguments() *kinesis.IncreaseStreamRetentionPeriodInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriod_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.IncreaseStreamRetentionPeriodInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.IncreaseStreamRetentionPeriodInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.IncreaseStreamRetentionPeriodInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) IncreaseStreamRetentionPeriodRequest(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) *KinesisAPI_IncreaseStreamRetentionPeriodRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IncreaseStreamRetentionPeriodRequest", params)
	return &KinesisAPI_IncreaseStreamRetentionPeriodRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_IncreaseStreamRetentionPeriodRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriodRequest_OngoingVerification) GetCapturedArguments() *kinesis.IncreaseStreamRetentionPeriodInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriodRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.IncreaseStreamRetentionPeriodInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.IncreaseStreamRetentionPeriodInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.IncreaseStreamRetentionPeriodInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) IncreaseStreamRetentionPeriodWithContext(_param0 aws.Context, _param1 *kinesis.IncreaseStreamRetentionPeriodInput, _param2 ...request.Option) *KinesisAPI_IncreaseStreamRetentionPeriodWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IncreaseStreamRetentionPeriodWithContext", params)
	return &KinesisAPI_IncreaseStreamRetentionPeriodWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_IncreaseStreamRetentionPeriodWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriodWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.IncreaseStreamRetentionPeriodInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_IncreaseStreamRetentionPeriodWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.IncreaseStreamRetentionPeriodInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.IncreaseStreamRetentionPeriodInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.IncreaseStreamRetentionPeriodInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListShards(_param0 *kinesis.ListShardsInput) *KinesisAPI_ListShards_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListShards", params)
	return &KinesisAPI_ListShards_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListShards_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListShards_OngoingVerification) GetCapturedArguments() *kinesis.ListShardsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListShards_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListShardsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListShardsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListShardsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListShardsRequest(_param0 *kinesis.ListShardsInput) *KinesisAPI_ListShardsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListShardsRequest", params)
	return &KinesisAPI_ListShardsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListShardsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListShardsRequest_OngoingVerification) GetCapturedArguments() *kinesis.ListShardsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListShardsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListShardsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListShardsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListShardsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListShardsWithContext(_param0 aws.Context, _param1 *kinesis.ListShardsInput, _param2 ...request.Option) *KinesisAPI_ListShardsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListShardsWithContext", params)
	return &KinesisAPI_ListShardsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListShardsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListShardsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.ListShardsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_ListShardsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.ListShardsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.ListShardsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.ListShardsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListStreams(_param0 *kinesis.ListStreamsInput) *KinesisAPI_ListStreams_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStreams", params)
	return &KinesisAPI_ListStreams_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListStreams_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListStreams_OngoingVerification) GetCapturedArguments() *kinesis.ListStreamsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListStreams_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListStreamsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListStreamsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListStreamsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListStreamsPages(_param0 *kinesis.ListStreamsInput, _param1 func(*kinesis.ListStreamsOutput, bool) bool) *KinesisAPI_ListStreamsPages_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStreamsPages", params)
	return &KinesisAPI_ListStreamsPages_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListStreamsPages_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListStreamsPages_OngoingVerification) GetCapturedArguments() (*kinesis.ListStreamsInput, func(*kinesis.ListStreamsOutput, bool) bool) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *KinesisAPI_ListStreamsPages_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListStreamsInput, _param1 []func(*kinesis.ListStreamsOutput, bool) bool) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListStreamsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListStreamsInput)
		}
		_param1 = make([]func(*kinesis.ListStreamsOutput, bool) bool, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(func(*kinesis.ListStreamsOutput, bool) bool)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListStreamsPagesWithContext(_param0 aws.Context, _param1 *kinesis.ListStreamsInput, _param2 func(*kinesis.ListStreamsOutput, bool) bool, _param3 ...request.Option) *KinesisAPI_ListStreamsPagesWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	for _, param := range _param3 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStreamsPagesWithContext", params)
	return &KinesisAPI_ListStreamsPagesWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListStreamsPagesWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListStreamsPagesWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.ListStreamsInput, func(*kinesis.ListStreamsOutput, bool) bool, []request.Option) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *KinesisAPI_ListStreamsPagesWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.ListStreamsInput, _param2 []func(*kinesis.ListStreamsOutput, bool) bool, _param3 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.ListStreamsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.ListStreamsInput)
		}
		_param2 = make([]func(*kinesis.ListStreamsOutput, bool) bool, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(func(*kinesis.ListStreamsOutput, bool) bool)
		}
		_param3 = make([][]request.Option, len(params[3]))
		for u := range params[0] {
			_param3[u] = make([]request.Option, len(params)-3)
			for x := 3; x < len(params); x++ {
				if params[x][u] != nil {
					_param3[u][x-3] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListStreamsRequest(_param0 *kinesis.ListStreamsInput) *KinesisAPI_ListStreamsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStreamsRequest", params)
	return &KinesisAPI_ListStreamsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListStreamsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListStreamsRequest_OngoingVerification) GetCapturedArguments() *kinesis.ListStreamsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListStreamsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListStreamsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListStreamsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListStreamsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListStreamsWithContext(_param0 aws.Context, _param1 *kinesis.ListStreamsInput, _param2 ...request.Option) *KinesisAPI_ListStreamsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStreamsWithContext", params)
	return &KinesisAPI_ListStreamsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListStreamsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListStreamsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.ListStreamsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_ListStreamsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.ListStreamsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.ListStreamsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.ListStreamsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListTagsForStream(_param0 *kinesis.ListTagsForStreamInput) *KinesisAPI_ListTagsForStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListTagsForStream", params)
	return &KinesisAPI_ListTagsForStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListTagsForStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListTagsForStream_OngoingVerification) GetCapturedArguments() *kinesis.ListTagsForStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListTagsForStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListTagsForStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListTagsForStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListTagsForStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListTagsForStreamRequest(_param0 *kinesis.ListTagsForStreamInput) *KinesisAPI_ListTagsForStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListTagsForStreamRequest", params)
	return &KinesisAPI_ListTagsForStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListTagsForStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListTagsForStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.ListTagsForStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_ListTagsForStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.ListTagsForStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.ListTagsForStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.ListTagsForStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) ListTagsForStreamWithContext(_param0 aws.Context, _param1 *kinesis.ListTagsForStreamInput, _param2 ...request.Option) *KinesisAPI_ListTagsForStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListTagsForStreamWithContext", params)
	return &KinesisAPI_ListTagsForStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_ListTagsForStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_ListTagsForStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.ListTagsForStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_ListTagsForStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.ListTagsForStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.ListTagsForStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.ListTagsForStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) MergeShards(_param0 *kinesis.MergeShardsInput) *KinesisAPI_MergeShards_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "MergeShards", params)
	return &KinesisAPI_MergeShards_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_MergeShards_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_MergeShards_OngoingVerification) GetCapturedArguments() *kinesis.MergeShardsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_MergeShards_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.MergeShardsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.MergeShardsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.MergeShardsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) MergeShardsRequest(_param0 *kinesis.MergeShardsInput) *KinesisAPI_MergeShardsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "MergeShardsRequest", params)
	return &KinesisAPI_MergeShardsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_MergeShardsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_MergeShardsRequest_OngoingVerification) GetCapturedArguments() *kinesis.MergeShardsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_MergeShardsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.MergeShardsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.MergeShardsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.MergeShardsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) MergeShardsWithContext(_param0 aws.Context, _param1 *kinesis.MergeShardsInput, _param2 ...request.Option) *KinesisAPI_MergeShardsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "MergeShardsWithContext", params)
	return &KinesisAPI_MergeShardsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_MergeShardsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_MergeShardsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.MergeShardsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_MergeShardsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.MergeShardsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.MergeShardsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.MergeShardsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecord(_param0 *kinesis.PutRecordInput) *KinesisAPI_PutRecord_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecord", params)
	return &KinesisAPI_PutRecord_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecord_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecord_OngoingVerification) GetCapturedArguments() *kinesis.PutRecordInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_PutRecord_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.PutRecordInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.PutRecordInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.PutRecordInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecordRequest(_param0 *kinesis.PutRecordInput) *KinesisAPI_PutRecordRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecordRequest", params)
	return &KinesisAPI_PutRecordRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecordRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecordRequest_OngoingVerification) GetCapturedArguments() *kinesis.PutRecordInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_PutRecordRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.PutRecordInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.PutRecordInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.PutRecordInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecordWithContext(_param0 aws.Context, _param1 *kinesis.PutRecordInput, _param2 ...request.Option) *KinesisAPI_PutRecordWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecordWithContext", params)
	return &KinesisAPI_PutRecordWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecordWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecordWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.PutRecordInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_PutRecordWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.PutRecordInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.PutRecordInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.PutRecordInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecords(_param0 *kinesis.PutRecordsInput) *KinesisAPI_PutRecords_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecords", params)
	return &KinesisAPI_PutRecords_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecords_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecords_OngoingVerification) GetCapturedArguments() *kinesis.PutRecordsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_PutRecords_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.PutRecordsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.PutRecordsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.PutRecordsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecordsRequest(_param0 *kinesis.PutRecordsInput) *KinesisAPI_PutRecordsRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecordsRequest", params)
	return &KinesisAPI_PutRecordsRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecordsRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecordsRequest_OngoingVerification) GetCapturedArguments() *kinesis.PutRecordsInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_PutRecordsRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.PutRecordsInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.PutRecordsInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.PutRecordsInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) PutRecordsWithContext(_param0 aws.Context, _param1 *kinesis.PutRecordsInput, _param2 ...request.Option) *KinesisAPI_PutRecordsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PutRecordsWithContext", params)
	return &KinesisAPI_PutRecordsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_PutRecordsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_PutRecordsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.PutRecordsInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_PutRecordsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.PutRecordsInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.PutRecordsInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.PutRecordsInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) RemoveTagsFromStream(_param0 *kinesis.RemoveTagsFromStreamInput) *KinesisAPI_RemoveTagsFromStream_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RemoveTagsFromStream", params)
	return &KinesisAPI_RemoveTagsFromStream_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_RemoveTagsFromStream_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_RemoveTagsFromStream_OngoingVerification) GetCapturedArguments() *kinesis.RemoveTagsFromStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_RemoveTagsFromStream_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.RemoveTagsFromStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.RemoveTagsFromStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.RemoveTagsFromStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) RemoveTagsFromStreamRequest(_param0 *kinesis.RemoveTagsFromStreamInput) *KinesisAPI_RemoveTagsFromStreamRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RemoveTagsFromStreamRequest", params)
	return &KinesisAPI_RemoveTagsFromStreamRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_RemoveTagsFromStreamRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_RemoveTagsFromStreamRequest_OngoingVerification) GetCapturedArguments() *kinesis.RemoveTagsFromStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_RemoveTagsFromStreamRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.RemoveTagsFromStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.RemoveTagsFromStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.RemoveTagsFromStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) RemoveTagsFromStreamWithContext(_param0 aws.Context, _param1 *kinesis.RemoveTagsFromStreamInput, _param2 ...request.Option) *KinesisAPI_RemoveTagsFromStreamWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RemoveTagsFromStreamWithContext", params)
	return &KinesisAPI_RemoveTagsFromStreamWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_RemoveTagsFromStreamWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_RemoveTagsFromStreamWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.RemoveTagsFromStreamInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_RemoveTagsFromStreamWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.RemoveTagsFromStreamInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.RemoveTagsFromStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.RemoveTagsFromStreamInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) SplitShard(_param0 *kinesis.SplitShardInput) *KinesisAPI_SplitShard_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SplitShard", params)
	return &KinesisAPI_SplitShard_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_SplitShard_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_SplitShard_OngoingVerification) GetCapturedArguments() *kinesis.SplitShardInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_SplitShard_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.SplitShardInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.SplitShardInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.SplitShardInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) SplitShardRequest(_param0 *kinesis.SplitShardInput) *KinesisAPI_SplitShardRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SplitShardRequest", params)
	return &KinesisAPI_SplitShardRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_SplitShardRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_SplitShardRequest_OngoingVerification) GetCapturedArguments() *kinesis.SplitShardInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_SplitShardRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.SplitShardInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.SplitShardInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.SplitShardInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) SplitShardWithContext(_param0 aws.Context, _param1 *kinesis.SplitShardInput, _param2 ...request.Option) *KinesisAPI_SplitShardWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SplitShardWithContext", params)
	return &KinesisAPI_SplitShardWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_SplitShardWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_SplitShardWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.SplitShardInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_SplitShardWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.SplitShardInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.SplitShardInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.SplitShardInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StartStreamEncryption(_param0 *kinesis.StartStreamEncryptionInput) *KinesisAPI_StartStreamEncryption_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StartStreamEncryption", params)
	return &KinesisAPI_StartStreamEncryption_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StartStreamEncryption_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StartStreamEncryption_OngoingVerification) GetCapturedArguments() *kinesis.StartStreamEncryptionInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_StartStreamEncryption_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.StartStreamEncryptionInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.StartStreamEncryptionInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.StartStreamEncryptionInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StartStreamEncryptionRequest(_param0 *kinesis.StartStreamEncryptionInput) *KinesisAPI_StartStreamEncryptionRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StartStreamEncryptionRequest", params)
	return &KinesisAPI_StartStreamEncryptionRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StartStreamEncryptionRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StartStreamEncryptionRequest_OngoingVerification) GetCapturedArguments() *kinesis.StartStreamEncryptionInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_StartStreamEncryptionRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.StartStreamEncryptionInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.StartStreamEncryptionInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.StartStreamEncryptionInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StartStreamEncryptionWithContext(_param0 aws.Context, _param1 *kinesis.StartStreamEncryptionInput, _param2 ...request.Option) *KinesisAPI_StartStreamEncryptionWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StartStreamEncryptionWithContext", params)
	return &KinesisAPI_StartStreamEncryptionWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StartStreamEncryptionWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StartStreamEncryptionWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.StartStreamEncryptionInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_StartStreamEncryptionWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.StartStreamEncryptionInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.StartStreamEncryptionInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.StartStreamEncryptionInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StopStreamEncryption(_param0 *kinesis.StopStreamEncryptionInput) *KinesisAPI_StopStreamEncryption_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StopStreamEncryption", params)
	return &KinesisAPI_StopStreamEncryption_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StopStreamEncryption_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StopStreamEncryption_OngoingVerification) GetCapturedArguments() *kinesis.StopStreamEncryptionInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_StopStreamEncryption_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.StopStreamEncryptionInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.StopStreamEncryptionInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.StopStreamEncryptionInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StopStreamEncryptionRequest(_param0 *kinesis.StopStreamEncryptionInput) *KinesisAPI_StopStreamEncryptionRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StopStreamEncryptionRequest", params)
	return &KinesisAPI_StopStreamEncryptionRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StopStreamEncryptionRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StopStreamEncryptionRequest_OngoingVerification) GetCapturedArguments() *kinesis.StopStreamEncryptionInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_StopStreamEncryptionRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.StopStreamEncryptionInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.StopStreamEncryptionInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.StopStreamEncryptionInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) StopStreamEncryptionWithContext(_param0 aws.Context, _param1 *kinesis.StopStreamEncryptionInput, _param2 ...request.Option) *KinesisAPI_StopStreamEncryptionWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "StopStreamEncryptionWithContext", params)
	return &KinesisAPI_StopStreamEncryptionWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_StopStreamEncryptionWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_StopStreamEncryptionWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.StopStreamEncryptionInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_StopStreamEncryptionWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.StopStreamEncryptionInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.StopStreamEncryptionInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.StopStreamEncryptionInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) UpdateShardCount(_param0 *kinesis.UpdateShardCountInput) *KinesisAPI_UpdateShardCount_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateShardCount", params)
	return &KinesisAPI_UpdateShardCount_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_UpdateShardCount_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_UpdateShardCount_OngoingVerification) GetCapturedArguments() *kinesis.UpdateShardCountInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_UpdateShardCount_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.UpdateShardCountInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.UpdateShardCountInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.UpdateShardCountInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) UpdateShardCountRequest(_param0 *kinesis.UpdateShardCountInput) *KinesisAPI_UpdateShardCountRequest_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateShardCountRequest", params)
	return &KinesisAPI_UpdateShardCountRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_UpdateShardCountRequest_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_UpdateShardCountRequest_OngoingVerification) GetCapturedArguments() *kinesis.UpdateShardCountInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_UpdateShardCountRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.UpdateShardCountInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.UpdateShardCountInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.UpdateShardCountInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) UpdateShardCountWithContext(_param0 aws.Context, _param1 *kinesis.UpdateShardCountInput, _param2 ...request.Option) *KinesisAPI_UpdateShardCountWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateShardCountWithContext", params)
	return &KinesisAPI_UpdateShardCountWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_UpdateShardCountWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_UpdateShardCountWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.UpdateShardCountInput, []request.Option) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_UpdateShardCountWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.UpdateShardCountInput, _param2 [][]request.Option) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.UpdateShardCountInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.UpdateShardCountInput)
		}
		_param2 = make([][]request.Option, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.Option, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.Option)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) WaitUntilStreamExists(_param0 *kinesis.DescribeStreamInput) *KinesisAPI_WaitUntilStreamExists_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WaitUntilStreamExists", params)
	return &KinesisAPI_WaitUntilStreamExists_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_WaitUntilStreamExists_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_WaitUntilStreamExists_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_WaitUntilStreamExists_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) WaitUntilStreamExistsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.WaiterOption) *KinesisAPI_WaitUntilStreamExistsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WaitUntilStreamExistsWithContext", params)
	return &KinesisAPI_WaitUntilStreamExistsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_WaitUntilStreamExistsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_WaitUntilStreamExistsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeStreamInput, []request.WaiterOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_WaitUntilStreamExistsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeStreamInput, _param2 [][]request.WaiterOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeStreamInput)
		}
		_param2 = make([][]request.WaiterOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.WaiterOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.WaiterOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) WaitUntilStreamNotExists(_param0 *kinesis.DescribeStreamInput) *KinesisAPI_WaitUntilStreamNotExists_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WaitUntilStreamNotExists", params)
	return &KinesisAPI_WaitUntilStreamNotExists_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_WaitUntilStreamNotExists_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_WaitUntilStreamNotExists_OngoingVerification) GetCapturedArguments() *kinesis.DescribeStreamInput {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *KinesisAPI_WaitUntilStreamNotExists_OngoingVerification) GetAllCapturedArguments() (_param0 []*kinesis.DescribeStreamInput) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*kinesis.DescribeStreamInput, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*kinesis.DescribeStreamInput)
		}
	}
	return
}

func (verifier *VerifierKinesisAPI) WaitUntilStreamNotExistsWithContext(_param0 aws.Context, _param1 *kinesis.DescribeStreamInput, _param2 ...request.WaiterOption) *KinesisAPI_WaitUntilStreamNotExistsWithContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WaitUntilStreamNotExistsWithContext", params)
	return &KinesisAPI_WaitUntilStreamNotExistsWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type KinesisAPI_WaitUntilStreamNotExistsWithContext_OngoingVerification struct {
	mock              *MockKinesisAPI
	methodInvocations []pegomock.MethodInvocation
}

func (c *KinesisAPI_WaitUntilStreamNotExistsWithContext_OngoingVerification) GetCapturedArguments() (aws.Context, *kinesis.DescribeStreamInput, []request.WaiterOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *KinesisAPI_WaitUntilStreamNotExistsWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []aws.Context, _param1 []*kinesis.DescribeStreamInput, _param2 [][]request.WaiterOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]aws.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(aws.Context)
		}
		_param1 = make([]*kinesis.DescribeStreamInput, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*kinesis.DescribeStreamInput)
		}
		_param2 = make([][]request.WaiterOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]request.WaiterOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(request.WaiterOption)
				}
			}
		}
	}
	return
}
